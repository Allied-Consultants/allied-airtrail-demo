// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/aircraft"
	"enttest/ent/predicate"
	"fmt"
	"sync"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAircraft = "Aircraft"
)

// AircraftMutation represents an operation that mutates the Aircraft nodes in the graph.
type AircraftMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	company_id                *uuid.UUID
	current_flight_hours      *float32
	addcurrent_flight_hours   *float32
	current_cycles            *int
	addcurrent_cycles         *int
	aircraft_registration     *string
	base_airport_code         *string
	manufacturer              *string
	manufacturer_designator   *string
	common_designation        *string
	common_name               *string
	pilots_required_to_fly    *int
	addpilots_required_to_fly *int
	default_values            *string
	maximum_values            *string
	current_landings          *int
	addcurrent_landings       *int
	fuel_details              *string
	oil_details               *string
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Aircraft, error)
	predicates                []predicate.Aircraft
}

var _ ent.Mutation = (*AircraftMutation)(nil)

// aircraftOption allows management of the mutation configuration using functional options.
type aircraftOption func(*AircraftMutation)

// newAircraftMutation creates new mutation for the Aircraft entity.
func newAircraftMutation(c config, op Op, opts ...aircraftOption) *AircraftMutation {
	m := &AircraftMutation{
		config:        c,
		op:            op,
		typ:           TypeAircraft,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAircraftID sets the ID field of the mutation.
func withAircraftID(id uuid.UUID) aircraftOption {
	return func(m *AircraftMutation) {
		var (
			err   error
			once  sync.Once
			value *Aircraft
		)
		m.oldValue = func(ctx context.Context) (*Aircraft, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Aircraft.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAircraft sets the old Aircraft of the mutation.
func withAircraft(node *Aircraft) aircraftOption {
	return func(m *AircraftMutation) {
		m.oldValue = func(context.Context) (*Aircraft, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AircraftMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AircraftMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Aircraft entities.
func (m *AircraftMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AircraftMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCompanyID sets the "company_id" field.
func (m *AircraftMutation) SetCompanyID(u uuid.UUID) {
	m.company_id = &u
}

// CompanyID returns the value of the "company_id" field in the mutation.
func (m *AircraftMutation) CompanyID() (r uuid.UUID, exists bool) {
	v := m.company_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCompanyID returns the old "company_id" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCompanyID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCompanyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCompanyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompanyID: %w", err)
	}
	return oldValue.CompanyID, nil
}

// ResetCompanyID resets all changes to the "company_id" field.
func (m *AircraftMutation) ResetCompanyID() {
	m.company_id = nil
}

// SetCurrentFlightHours sets the "current_flight_hours" field.
func (m *AircraftMutation) SetCurrentFlightHours(f float32) {
	m.current_flight_hours = &f
	m.addcurrent_flight_hours = nil
}

// CurrentFlightHours returns the value of the "current_flight_hours" field in the mutation.
func (m *AircraftMutation) CurrentFlightHours() (r float32, exists bool) {
	v := m.current_flight_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentFlightHours returns the old "current_flight_hours" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCurrentFlightHours(ctx context.Context) (v *float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrentFlightHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrentFlightHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentFlightHours: %w", err)
	}
	return oldValue.CurrentFlightHours, nil
}

// AddCurrentFlightHours adds f to the "current_flight_hours" field.
func (m *AircraftMutation) AddCurrentFlightHours(f float32) {
	if m.addcurrent_flight_hours != nil {
		*m.addcurrent_flight_hours += f
	} else {
		m.addcurrent_flight_hours = &f
	}
}

// AddedCurrentFlightHours returns the value that was added to the "current_flight_hours" field in this mutation.
func (m *AircraftMutation) AddedCurrentFlightHours() (r float32, exists bool) {
	v := m.addcurrent_flight_hours
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentFlightHours clears the value of the "current_flight_hours" field.
func (m *AircraftMutation) ClearCurrentFlightHours() {
	m.current_flight_hours = nil
	m.addcurrent_flight_hours = nil
	m.clearedFields[aircraft.FieldCurrentFlightHours] = struct{}{}
}

// CurrentFlightHoursCleared returns if the "current_flight_hours" field was cleared in this mutation.
func (m *AircraftMutation) CurrentFlightHoursCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldCurrentFlightHours]
	return ok
}

// ResetCurrentFlightHours resets all changes to the "current_flight_hours" field.
func (m *AircraftMutation) ResetCurrentFlightHours() {
	m.current_flight_hours = nil
	m.addcurrent_flight_hours = nil
	delete(m.clearedFields, aircraft.FieldCurrentFlightHours)
}

// SetCurrentCycles sets the "current_cycles" field.
func (m *AircraftMutation) SetCurrentCycles(i int) {
	m.current_cycles = &i
	m.addcurrent_cycles = nil
}

// CurrentCycles returns the value of the "current_cycles" field in the mutation.
func (m *AircraftMutation) CurrentCycles() (r int, exists bool) {
	v := m.current_cycles
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentCycles returns the old "current_cycles" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCurrentCycles(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrentCycles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrentCycles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentCycles: %w", err)
	}
	return oldValue.CurrentCycles, nil
}

// AddCurrentCycles adds i to the "current_cycles" field.
func (m *AircraftMutation) AddCurrentCycles(i int) {
	if m.addcurrent_cycles != nil {
		*m.addcurrent_cycles += i
	} else {
		m.addcurrent_cycles = &i
	}
}

// AddedCurrentCycles returns the value that was added to the "current_cycles" field in this mutation.
func (m *AircraftMutation) AddedCurrentCycles() (r int, exists bool) {
	v := m.addcurrent_cycles
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentCycles clears the value of the "current_cycles" field.
func (m *AircraftMutation) ClearCurrentCycles() {
	m.current_cycles = nil
	m.addcurrent_cycles = nil
	m.clearedFields[aircraft.FieldCurrentCycles] = struct{}{}
}

// CurrentCyclesCleared returns if the "current_cycles" field was cleared in this mutation.
func (m *AircraftMutation) CurrentCyclesCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldCurrentCycles]
	return ok
}

// ResetCurrentCycles resets all changes to the "current_cycles" field.
func (m *AircraftMutation) ResetCurrentCycles() {
	m.current_cycles = nil
	m.addcurrent_cycles = nil
	delete(m.clearedFields, aircraft.FieldCurrentCycles)
}

// SetAircraftRegistration sets the "aircraft_registration" field.
func (m *AircraftMutation) SetAircraftRegistration(s string) {
	m.aircraft_registration = &s
}

// AircraftRegistration returns the value of the "aircraft_registration" field in the mutation.
func (m *AircraftMutation) AircraftRegistration() (r string, exists bool) {
	v := m.aircraft_registration
	if v == nil {
		return
	}
	return *v, true
}

// OldAircraftRegistration returns the old "aircraft_registration" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldAircraftRegistration(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAircraftRegistration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAircraftRegistration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAircraftRegistration: %w", err)
	}
	return oldValue.AircraftRegistration, nil
}

// ClearAircraftRegistration clears the value of the "aircraft_registration" field.
func (m *AircraftMutation) ClearAircraftRegistration() {
	m.aircraft_registration = nil
	m.clearedFields[aircraft.FieldAircraftRegistration] = struct{}{}
}

// AircraftRegistrationCleared returns if the "aircraft_registration" field was cleared in this mutation.
func (m *AircraftMutation) AircraftRegistrationCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldAircraftRegistration]
	return ok
}

// ResetAircraftRegistration resets all changes to the "aircraft_registration" field.
func (m *AircraftMutation) ResetAircraftRegistration() {
	m.aircraft_registration = nil
	delete(m.clearedFields, aircraft.FieldAircraftRegistration)
}

// SetBaseAirportCode sets the "base_airport_code" field.
func (m *AircraftMutation) SetBaseAirportCode(s string) {
	m.base_airport_code = &s
}

// BaseAirportCode returns the value of the "base_airport_code" field in the mutation.
func (m *AircraftMutation) BaseAirportCode() (r string, exists bool) {
	v := m.base_airport_code
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseAirportCode returns the old "base_airport_code" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldBaseAirportCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBaseAirportCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBaseAirportCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseAirportCode: %w", err)
	}
	return oldValue.BaseAirportCode, nil
}

// ClearBaseAirportCode clears the value of the "base_airport_code" field.
func (m *AircraftMutation) ClearBaseAirportCode() {
	m.base_airport_code = nil
	m.clearedFields[aircraft.FieldBaseAirportCode] = struct{}{}
}

// BaseAirportCodeCleared returns if the "base_airport_code" field was cleared in this mutation.
func (m *AircraftMutation) BaseAirportCodeCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldBaseAirportCode]
	return ok
}

// ResetBaseAirportCode resets all changes to the "base_airport_code" field.
func (m *AircraftMutation) ResetBaseAirportCode() {
	m.base_airport_code = nil
	delete(m.clearedFields, aircraft.FieldBaseAirportCode)
}

// SetManufacturer sets the "manufacturer" field.
func (m *AircraftMutation) SetManufacturer(s string) {
	m.manufacturer = &s
}

// Manufacturer returns the value of the "manufacturer" field in the mutation.
func (m *AircraftMutation) Manufacturer() (r string, exists bool) {
	v := m.manufacturer
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturer returns the old "manufacturer" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldManufacturer(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldManufacturer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldManufacturer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturer: %w", err)
	}
	return oldValue.Manufacturer, nil
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (m *AircraftMutation) ClearManufacturer() {
	m.manufacturer = nil
	m.clearedFields[aircraft.FieldManufacturer] = struct{}{}
}

// ManufacturerCleared returns if the "manufacturer" field was cleared in this mutation.
func (m *AircraftMutation) ManufacturerCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldManufacturer]
	return ok
}

// ResetManufacturer resets all changes to the "manufacturer" field.
func (m *AircraftMutation) ResetManufacturer() {
	m.manufacturer = nil
	delete(m.clearedFields, aircraft.FieldManufacturer)
}

// SetManufacturerDesignator sets the "manufacturer_designator" field.
func (m *AircraftMutation) SetManufacturerDesignator(s string) {
	m.manufacturer_designator = &s
}

// ManufacturerDesignator returns the value of the "manufacturer_designator" field in the mutation.
func (m *AircraftMutation) ManufacturerDesignator() (r string, exists bool) {
	v := m.manufacturer_designator
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturerDesignator returns the old "manufacturer_designator" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldManufacturerDesignator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldManufacturerDesignator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldManufacturerDesignator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturerDesignator: %w", err)
	}
	return oldValue.ManufacturerDesignator, nil
}

// ClearManufacturerDesignator clears the value of the "manufacturer_designator" field.
func (m *AircraftMutation) ClearManufacturerDesignator() {
	m.manufacturer_designator = nil
	m.clearedFields[aircraft.FieldManufacturerDesignator] = struct{}{}
}

// ManufacturerDesignatorCleared returns if the "manufacturer_designator" field was cleared in this mutation.
func (m *AircraftMutation) ManufacturerDesignatorCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldManufacturerDesignator]
	return ok
}

// ResetManufacturerDesignator resets all changes to the "manufacturer_designator" field.
func (m *AircraftMutation) ResetManufacturerDesignator() {
	m.manufacturer_designator = nil
	delete(m.clearedFields, aircraft.FieldManufacturerDesignator)
}

// SetCommonDesignation sets the "common_designation" field.
func (m *AircraftMutation) SetCommonDesignation(s string) {
	m.common_designation = &s
}

// CommonDesignation returns the value of the "common_designation" field in the mutation.
func (m *AircraftMutation) CommonDesignation() (r string, exists bool) {
	v := m.common_designation
	if v == nil {
		return
	}
	return *v, true
}

// OldCommonDesignation returns the old "common_designation" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCommonDesignation(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCommonDesignation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCommonDesignation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommonDesignation: %w", err)
	}
	return oldValue.CommonDesignation, nil
}

// ClearCommonDesignation clears the value of the "common_designation" field.
func (m *AircraftMutation) ClearCommonDesignation() {
	m.common_designation = nil
	m.clearedFields[aircraft.FieldCommonDesignation] = struct{}{}
}

// CommonDesignationCleared returns if the "common_designation" field was cleared in this mutation.
func (m *AircraftMutation) CommonDesignationCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldCommonDesignation]
	return ok
}

// ResetCommonDesignation resets all changes to the "common_designation" field.
func (m *AircraftMutation) ResetCommonDesignation() {
	m.common_designation = nil
	delete(m.clearedFields, aircraft.FieldCommonDesignation)
}

// SetCommonName sets the "common_name" field.
func (m *AircraftMutation) SetCommonName(s string) {
	m.common_name = &s
}

// CommonName returns the value of the "common_name" field in the mutation.
func (m *AircraftMutation) CommonName() (r string, exists bool) {
	v := m.common_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCommonName returns the old "common_name" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCommonName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCommonName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCommonName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommonName: %w", err)
	}
	return oldValue.CommonName, nil
}

// ClearCommonName clears the value of the "common_name" field.
func (m *AircraftMutation) ClearCommonName() {
	m.common_name = nil
	m.clearedFields[aircraft.FieldCommonName] = struct{}{}
}

// CommonNameCleared returns if the "common_name" field was cleared in this mutation.
func (m *AircraftMutation) CommonNameCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldCommonName]
	return ok
}

// ResetCommonName resets all changes to the "common_name" field.
func (m *AircraftMutation) ResetCommonName() {
	m.common_name = nil
	delete(m.clearedFields, aircraft.FieldCommonName)
}

// SetPilotsRequiredToFly sets the "pilots_required_to_fly" field.
func (m *AircraftMutation) SetPilotsRequiredToFly(i int) {
	m.pilots_required_to_fly = &i
	m.addpilots_required_to_fly = nil
}

// PilotsRequiredToFly returns the value of the "pilots_required_to_fly" field in the mutation.
func (m *AircraftMutation) PilotsRequiredToFly() (r int, exists bool) {
	v := m.pilots_required_to_fly
	if v == nil {
		return
	}
	return *v, true
}

// OldPilotsRequiredToFly returns the old "pilots_required_to_fly" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldPilotsRequiredToFly(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPilotsRequiredToFly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPilotsRequiredToFly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPilotsRequiredToFly: %w", err)
	}
	return oldValue.PilotsRequiredToFly, nil
}

// AddPilotsRequiredToFly adds i to the "pilots_required_to_fly" field.
func (m *AircraftMutation) AddPilotsRequiredToFly(i int) {
	if m.addpilots_required_to_fly != nil {
		*m.addpilots_required_to_fly += i
	} else {
		m.addpilots_required_to_fly = &i
	}
}

// AddedPilotsRequiredToFly returns the value that was added to the "pilots_required_to_fly" field in this mutation.
func (m *AircraftMutation) AddedPilotsRequiredToFly() (r int, exists bool) {
	v := m.addpilots_required_to_fly
	if v == nil {
		return
	}
	return *v, true
}

// ClearPilotsRequiredToFly clears the value of the "pilots_required_to_fly" field.
func (m *AircraftMutation) ClearPilotsRequiredToFly() {
	m.pilots_required_to_fly = nil
	m.addpilots_required_to_fly = nil
	m.clearedFields[aircraft.FieldPilotsRequiredToFly] = struct{}{}
}

// PilotsRequiredToFlyCleared returns if the "pilots_required_to_fly" field was cleared in this mutation.
func (m *AircraftMutation) PilotsRequiredToFlyCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldPilotsRequiredToFly]
	return ok
}

// ResetPilotsRequiredToFly resets all changes to the "pilots_required_to_fly" field.
func (m *AircraftMutation) ResetPilotsRequiredToFly() {
	m.pilots_required_to_fly = nil
	m.addpilots_required_to_fly = nil
	delete(m.clearedFields, aircraft.FieldPilotsRequiredToFly)
}

// SetDefaultValues sets the "default_values" field.
func (m *AircraftMutation) SetDefaultValues(s string) {
	m.default_values = &s
}

// DefaultValues returns the value of the "default_values" field in the mutation.
func (m *AircraftMutation) DefaultValues() (r string, exists bool) {
	v := m.default_values
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultValues returns the old "default_values" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldDefaultValues(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefaultValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefaultValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultValues: %w", err)
	}
	return oldValue.DefaultValues, nil
}

// ClearDefaultValues clears the value of the "default_values" field.
func (m *AircraftMutation) ClearDefaultValues() {
	m.default_values = nil
	m.clearedFields[aircraft.FieldDefaultValues] = struct{}{}
}

// DefaultValuesCleared returns if the "default_values" field was cleared in this mutation.
func (m *AircraftMutation) DefaultValuesCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldDefaultValues]
	return ok
}

// ResetDefaultValues resets all changes to the "default_values" field.
func (m *AircraftMutation) ResetDefaultValues() {
	m.default_values = nil
	delete(m.clearedFields, aircraft.FieldDefaultValues)
}

// SetMaximumValues sets the "maximum_values" field.
func (m *AircraftMutation) SetMaximumValues(s string) {
	m.maximum_values = &s
}

// MaximumValues returns the value of the "maximum_values" field in the mutation.
func (m *AircraftMutation) MaximumValues() (r string, exists bool) {
	v := m.maximum_values
	if v == nil {
		return
	}
	return *v, true
}

// OldMaximumValues returns the old "maximum_values" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldMaximumValues(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMaximumValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMaximumValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaximumValues: %w", err)
	}
	return oldValue.MaximumValues, nil
}

// ClearMaximumValues clears the value of the "maximum_values" field.
func (m *AircraftMutation) ClearMaximumValues() {
	m.maximum_values = nil
	m.clearedFields[aircraft.FieldMaximumValues] = struct{}{}
}

// MaximumValuesCleared returns if the "maximum_values" field was cleared in this mutation.
func (m *AircraftMutation) MaximumValuesCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldMaximumValues]
	return ok
}

// ResetMaximumValues resets all changes to the "maximum_values" field.
func (m *AircraftMutation) ResetMaximumValues() {
	m.maximum_values = nil
	delete(m.clearedFields, aircraft.FieldMaximumValues)
}

// SetCurrentLandings sets the "current_landings" field.
func (m *AircraftMutation) SetCurrentLandings(i int) {
	m.current_landings = &i
	m.addcurrent_landings = nil
}

// CurrentLandings returns the value of the "current_landings" field in the mutation.
func (m *AircraftMutation) CurrentLandings() (r int, exists bool) {
	v := m.current_landings
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentLandings returns the old "current_landings" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldCurrentLandings(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrentLandings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrentLandings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentLandings: %w", err)
	}
	return oldValue.CurrentLandings, nil
}

// AddCurrentLandings adds i to the "current_landings" field.
func (m *AircraftMutation) AddCurrentLandings(i int) {
	if m.addcurrent_landings != nil {
		*m.addcurrent_landings += i
	} else {
		m.addcurrent_landings = &i
	}
}

// AddedCurrentLandings returns the value that was added to the "current_landings" field in this mutation.
func (m *AircraftMutation) AddedCurrentLandings() (r int, exists bool) {
	v := m.addcurrent_landings
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentLandings clears the value of the "current_landings" field.
func (m *AircraftMutation) ClearCurrentLandings() {
	m.current_landings = nil
	m.addcurrent_landings = nil
	m.clearedFields[aircraft.FieldCurrentLandings] = struct{}{}
}

// CurrentLandingsCleared returns if the "current_landings" field was cleared in this mutation.
func (m *AircraftMutation) CurrentLandingsCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldCurrentLandings]
	return ok
}

// ResetCurrentLandings resets all changes to the "current_landings" field.
func (m *AircraftMutation) ResetCurrentLandings() {
	m.current_landings = nil
	m.addcurrent_landings = nil
	delete(m.clearedFields, aircraft.FieldCurrentLandings)
}

// SetFuelDetails sets the "fuel_details" field.
func (m *AircraftMutation) SetFuelDetails(s string) {
	m.fuel_details = &s
}

// FuelDetails returns the value of the "fuel_details" field in the mutation.
func (m *AircraftMutation) FuelDetails() (r string, exists bool) {
	v := m.fuel_details
	if v == nil {
		return
	}
	return *v, true
}

// OldFuelDetails returns the old "fuel_details" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldFuelDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFuelDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFuelDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFuelDetails: %w", err)
	}
	return oldValue.FuelDetails, nil
}

// ClearFuelDetails clears the value of the "fuel_details" field.
func (m *AircraftMutation) ClearFuelDetails() {
	m.fuel_details = nil
	m.clearedFields[aircraft.FieldFuelDetails] = struct{}{}
}

// FuelDetailsCleared returns if the "fuel_details" field was cleared in this mutation.
func (m *AircraftMutation) FuelDetailsCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldFuelDetails]
	return ok
}

// ResetFuelDetails resets all changes to the "fuel_details" field.
func (m *AircraftMutation) ResetFuelDetails() {
	m.fuel_details = nil
	delete(m.clearedFields, aircraft.FieldFuelDetails)
}

// SetOilDetails sets the "oil_details" field.
func (m *AircraftMutation) SetOilDetails(s string) {
	m.oil_details = &s
}

// OilDetails returns the value of the "oil_details" field in the mutation.
func (m *AircraftMutation) OilDetails() (r string, exists bool) {
	v := m.oil_details
	if v == nil {
		return
	}
	return *v, true
}

// OldOilDetails returns the old "oil_details" field's value of the Aircraft entity.
// If the Aircraft object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AircraftMutation) OldOilDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOilDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOilDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOilDetails: %w", err)
	}
	return oldValue.OilDetails, nil
}

// ClearOilDetails clears the value of the "oil_details" field.
func (m *AircraftMutation) ClearOilDetails() {
	m.oil_details = nil
	m.clearedFields[aircraft.FieldOilDetails] = struct{}{}
}

// OilDetailsCleared returns if the "oil_details" field was cleared in this mutation.
func (m *AircraftMutation) OilDetailsCleared() bool {
	_, ok := m.clearedFields[aircraft.FieldOilDetails]
	return ok
}

// ResetOilDetails resets all changes to the "oil_details" field.
func (m *AircraftMutation) ResetOilDetails() {
	m.oil_details = nil
	delete(m.clearedFields, aircraft.FieldOilDetails)
}

// Where appends a list predicates to the AircraftMutation builder.
func (m *AircraftMutation) Where(ps ...predicate.Aircraft) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AircraftMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Aircraft).
func (m *AircraftMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AircraftMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.company_id != nil {
		fields = append(fields, aircraft.FieldCompanyID)
	}
	if m.current_flight_hours != nil {
		fields = append(fields, aircraft.FieldCurrentFlightHours)
	}
	if m.current_cycles != nil {
		fields = append(fields, aircraft.FieldCurrentCycles)
	}
	if m.aircraft_registration != nil {
		fields = append(fields, aircraft.FieldAircraftRegistration)
	}
	if m.base_airport_code != nil {
		fields = append(fields, aircraft.FieldBaseAirportCode)
	}
	if m.manufacturer != nil {
		fields = append(fields, aircraft.FieldManufacturer)
	}
	if m.manufacturer_designator != nil {
		fields = append(fields, aircraft.FieldManufacturerDesignator)
	}
	if m.common_designation != nil {
		fields = append(fields, aircraft.FieldCommonDesignation)
	}
	if m.common_name != nil {
		fields = append(fields, aircraft.FieldCommonName)
	}
	if m.pilots_required_to_fly != nil {
		fields = append(fields, aircraft.FieldPilotsRequiredToFly)
	}
	if m.default_values != nil {
		fields = append(fields, aircraft.FieldDefaultValues)
	}
	if m.maximum_values != nil {
		fields = append(fields, aircraft.FieldMaximumValues)
	}
	if m.current_landings != nil {
		fields = append(fields, aircraft.FieldCurrentLandings)
	}
	if m.fuel_details != nil {
		fields = append(fields, aircraft.FieldFuelDetails)
	}
	if m.oil_details != nil {
		fields = append(fields, aircraft.FieldOilDetails)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AircraftMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case aircraft.FieldCompanyID:
		return m.CompanyID()
	case aircraft.FieldCurrentFlightHours:
		return m.CurrentFlightHours()
	case aircraft.FieldCurrentCycles:
		return m.CurrentCycles()
	case aircraft.FieldAircraftRegistration:
		return m.AircraftRegistration()
	case aircraft.FieldBaseAirportCode:
		return m.BaseAirportCode()
	case aircraft.FieldManufacturer:
		return m.Manufacturer()
	case aircraft.FieldManufacturerDesignator:
		return m.ManufacturerDesignator()
	case aircraft.FieldCommonDesignation:
		return m.CommonDesignation()
	case aircraft.FieldCommonName:
		return m.CommonName()
	case aircraft.FieldPilotsRequiredToFly:
		return m.PilotsRequiredToFly()
	case aircraft.FieldDefaultValues:
		return m.DefaultValues()
	case aircraft.FieldMaximumValues:
		return m.MaximumValues()
	case aircraft.FieldCurrentLandings:
		return m.CurrentLandings()
	case aircraft.FieldFuelDetails:
		return m.FuelDetails()
	case aircraft.FieldOilDetails:
		return m.OilDetails()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AircraftMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case aircraft.FieldCompanyID:
		return m.OldCompanyID(ctx)
	case aircraft.FieldCurrentFlightHours:
		return m.OldCurrentFlightHours(ctx)
	case aircraft.FieldCurrentCycles:
		return m.OldCurrentCycles(ctx)
	case aircraft.FieldAircraftRegistration:
		return m.OldAircraftRegistration(ctx)
	case aircraft.FieldBaseAirportCode:
		return m.OldBaseAirportCode(ctx)
	case aircraft.FieldManufacturer:
		return m.OldManufacturer(ctx)
	case aircraft.FieldManufacturerDesignator:
		return m.OldManufacturerDesignator(ctx)
	case aircraft.FieldCommonDesignation:
		return m.OldCommonDesignation(ctx)
	case aircraft.FieldCommonName:
		return m.OldCommonName(ctx)
	case aircraft.FieldPilotsRequiredToFly:
		return m.OldPilotsRequiredToFly(ctx)
	case aircraft.FieldDefaultValues:
		return m.OldDefaultValues(ctx)
	case aircraft.FieldMaximumValues:
		return m.OldMaximumValues(ctx)
	case aircraft.FieldCurrentLandings:
		return m.OldCurrentLandings(ctx)
	case aircraft.FieldFuelDetails:
		return m.OldFuelDetails(ctx)
	case aircraft.FieldOilDetails:
		return m.OldOilDetails(ctx)
	}
	return nil, fmt.Errorf("unknown Aircraft field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AircraftMutation) SetField(name string, value ent.Value) error {
	switch name {
	case aircraft.FieldCompanyID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompanyID(v)
		return nil
	case aircraft.FieldCurrentFlightHours:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentFlightHours(v)
		return nil
	case aircraft.FieldCurrentCycles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentCycles(v)
		return nil
	case aircraft.FieldAircraftRegistration:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAircraftRegistration(v)
		return nil
	case aircraft.FieldBaseAirportCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseAirportCode(v)
		return nil
	case aircraft.FieldManufacturer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturer(v)
		return nil
	case aircraft.FieldManufacturerDesignator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturerDesignator(v)
		return nil
	case aircraft.FieldCommonDesignation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommonDesignation(v)
		return nil
	case aircraft.FieldCommonName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommonName(v)
		return nil
	case aircraft.FieldPilotsRequiredToFly:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPilotsRequiredToFly(v)
		return nil
	case aircraft.FieldDefaultValues:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultValues(v)
		return nil
	case aircraft.FieldMaximumValues:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaximumValues(v)
		return nil
	case aircraft.FieldCurrentLandings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentLandings(v)
		return nil
	case aircraft.FieldFuelDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFuelDetails(v)
		return nil
	case aircraft.FieldOilDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOilDetails(v)
		return nil
	}
	return fmt.Errorf("unknown Aircraft field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AircraftMutation) AddedFields() []string {
	var fields []string
	if m.addcurrent_flight_hours != nil {
		fields = append(fields, aircraft.FieldCurrentFlightHours)
	}
	if m.addcurrent_cycles != nil {
		fields = append(fields, aircraft.FieldCurrentCycles)
	}
	if m.addpilots_required_to_fly != nil {
		fields = append(fields, aircraft.FieldPilotsRequiredToFly)
	}
	if m.addcurrent_landings != nil {
		fields = append(fields, aircraft.FieldCurrentLandings)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AircraftMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case aircraft.FieldCurrentFlightHours:
		return m.AddedCurrentFlightHours()
	case aircraft.FieldCurrentCycles:
		return m.AddedCurrentCycles()
	case aircraft.FieldPilotsRequiredToFly:
		return m.AddedPilotsRequiredToFly()
	case aircraft.FieldCurrentLandings:
		return m.AddedCurrentLandings()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AircraftMutation) AddField(name string, value ent.Value) error {
	switch name {
	case aircraft.FieldCurrentFlightHours:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentFlightHours(v)
		return nil
	case aircraft.FieldCurrentCycles:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentCycles(v)
		return nil
	case aircraft.FieldPilotsRequiredToFly:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPilotsRequiredToFly(v)
		return nil
	case aircraft.FieldCurrentLandings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentLandings(v)
		return nil
	}
	return fmt.Errorf("unknown Aircraft numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AircraftMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(aircraft.FieldCurrentFlightHours) {
		fields = append(fields, aircraft.FieldCurrentFlightHours)
	}
	if m.FieldCleared(aircraft.FieldCurrentCycles) {
		fields = append(fields, aircraft.FieldCurrentCycles)
	}
	if m.FieldCleared(aircraft.FieldAircraftRegistration) {
		fields = append(fields, aircraft.FieldAircraftRegistration)
	}
	if m.FieldCleared(aircraft.FieldBaseAirportCode) {
		fields = append(fields, aircraft.FieldBaseAirportCode)
	}
	if m.FieldCleared(aircraft.FieldManufacturer) {
		fields = append(fields, aircraft.FieldManufacturer)
	}
	if m.FieldCleared(aircraft.FieldManufacturerDesignator) {
		fields = append(fields, aircraft.FieldManufacturerDesignator)
	}
	if m.FieldCleared(aircraft.FieldCommonDesignation) {
		fields = append(fields, aircraft.FieldCommonDesignation)
	}
	if m.FieldCleared(aircraft.FieldCommonName) {
		fields = append(fields, aircraft.FieldCommonName)
	}
	if m.FieldCleared(aircraft.FieldPilotsRequiredToFly) {
		fields = append(fields, aircraft.FieldPilotsRequiredToFly)
	}
	if m.FieldCleared(aircraft.FieldDefaultValues) {
		fields = append(fields, aircraft.FieldDefaultValues)
	}
	if m.FieldCleared(aircraft.FieldMaximumValues) {
		fields = append(fields, aircraft.FieldMaximumValues)
	}
	if m.FieldCleared(aircraft.FieldCurrentLandings) {
		fields = append(fields, aircraft.FieldCurrentLandings)
	}
	if m.FieldCleared(aircraft.FieldFuelDetails) {
		fields = append(fields, aircraft.FieldFuelDetails)
	}
	if m.FieldCleared(aircraft.FieldOilDetails) {
		fields = append(fields, aircraft.FieldOilDetails)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AircraftMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AircraftMutation) ClearField(name string) error {
	switch name {
	case aircraft.FieldCurrentFlightHours:
		m.ClearCurrentFlightHours()
		return nil
	case aircraft.FieldCurrentCycles:
		m.ClearCurrentCycles()
		return nil
	case aircraft.FieldAircraftRegistration:
		m.ClearAircraftRegistration()
		return nil
	case aircraft.FieldBaseAirportCode:
		m.ClearBaseAirportCode()
		return nil
	case aircraft.FieldManufacturer:
		m.ClearManufacturer()
		return nil
	case aircraft.FieldManufacturerDesignator:
		m.ClearManufacturerDesignator()
		return nil
	case aircraft.FieldCommonDesignation:
		m.ClearCommonDesignation()
		return nil
	case aircraft.FieldCommonName:
		m.ClearCommonName()
		return nil
	case aircraft.FieldPilotsRequiredToFly:
		m.ClearPilotsRequiredToFly()
		return nil
	case aircraft.FieldDefaultValues:
		m.ClearDefaultValues()
		return nil
	case aircraft.FieldMaximumValues:
		m.ClearMaximumValues()
		return nil
	case aircraft.FieldCurrentLandings:
		m.ClearCurrentLandings()
		return nil
	case aircraft.FieldFuelDetails:
		m.ClearFuelDetails()
		return nil
	case aircraft.FieldOilDetails:
		m.ClearOilDetails()
		return nil
	}
	return fmt.Errorf("unknown Aircraft nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AircraftMutation) ResetField(name string) error {
	switch name {
	case aircraft.FieldCompanyID:
		m.ResetCompanyID()
		return nil
	case aircraft.FieldCurrentFlightHours:
		m.ResetCurrentFlightHours()
		return nil
	case aircraft.FieldCurrentCycles:
		m.ResetCurrentCycles()
		return nil
	case aircraft.FieldAircraftRegistration:
		m.ResetAircraftRegistration()
		return nil
	case aircraft.FieldBaseAirportCode:
		m.ResetBaseAirportCode()
		return nil
	case aircraft.FieldManufacturer:
		m.ResetManufacturer()
		return nil
	case aircraft.FieldManufacturerDesignator:
		m.ResetManufacturerDesignator()
		return nil
	case aircraft.FieldCommonDesignation:
		m.ResetCommonDesignation()
		return nil
	case aircraft.FieldCommonName:
		m.ResetCommonName()
		return nil
	case aircraft.FieldPilotsRequiredToFly:
		m.ResetPilotsRequiredToFly()
		return nil
	case aircraft.FieldDefaultValues:
		m.ResetDefaultValues()
		return nil
	case aircraft.FieldMaximumValues:
		m.ResetMaximumValues()
		return nil
	case aircraft.FieldCurrentLandings:
		m.ResetCurrentLandings()
		return nil
	case aircraft.FieldFuelDetails:
		m.ResetFuelDetails()
		return nil
	case aircraft.FieldOilDetails:
		m.ResetOilDetails()
		return nil
	}
	return fmt.Errorf("unknown Aircraft field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AircraftMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AircraftMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AircraftMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AircraftMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AircraftMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AircraftMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AircraftMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Aircraft unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AircraftMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Aircraft edge %s", name)
}
