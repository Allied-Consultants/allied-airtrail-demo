// Code generated by entc, DO NOT EDIT.

package aircraft

import (
	"enttest/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyID), v))
	})
}

// CurrentFlightHours applies equality check predicate on the "current_flight_hours" field. It's identical to CurrentFlightHoursEQ.
func CurrentFlightHours(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentCycles applies equality check predicate on the "current_cycles" field. It's identical to CurrentCyclesEQ.
func CurrentCycles(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCycles), v))
	})
}

// AircraftRegistration applies equality check predicate on the "aircraft_registration" field. It's identical to AircraftRegistrationEQ.
func AircraftRegistration(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAircraftRegistration), v))
	})
}

// BaseAirportCode applies equality check predicate on the "base_airport_code" field. It's identical to BaseAirportCodeEQ.
func BaseAirportCode(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseAirportCode), v))
	})
}

// Manufacturer applies equality check predicate on the "manufacturer" field. It's identical to ManufacturerEQ.
func Manufacturer(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturer), v))
	})
}

// ManufacturerDesignator applies equality check predicate on the "manufacturer_designator" field. It's identical to ManufacturerDesignatorEQ.
func ManufacturerDesignator(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturerDesignator), v))
	})
}

// CommonDesignation applies equality check predicate on the "common_designation" field. It's identical to CommonDesignationEQ.
func CommonDesignation(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonDesignation), v))
	})
}

// CommonName applies equality check predicate on the "common_name" field. It's identical to CommonNameEQ.
func CommonName(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonName), v))
	})
}

// PilotsRequiredToFly applies equality check predicate on the "pilots_required_to_fly" field. It's identical to PilotsRequiredToFlyEQ.
func PilotsRequiredToFly(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPilotsRequiredToFly), v))
	})
}

// DefaultValues applies equality check predicate on the "default_values" field. It's identical to DefaultValuesEQ.
func DefaultValues(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultValues), v))
	})
}

// MaximumValues applies equality check predicate on the "maximum_values" field. It's identical to MaximumValuesEQ.
func MaximumValues(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaximumValues), v))
	})
}

// CurrentLandings applies equality check predicate on the "current_landings" field. It's identical to CurrentLandingsEQ.
func CurrentLandings(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentLandings), v))
	})
}

// FuelDetails applies equality check predicate on the "fuel_details" field. It's identical to FuelDetailsEQ.
func FuelDetails(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelDetails), v))
	})
}

// OilDetails applies equality check predicate on the "oil_details" field. It's identical to OilDetailsEQ.
func OilDetails(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOilDetails), v))
	})
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyID), v))
	})
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompanyID), v))
	})
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...uuid.UUID) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompanyID), v...))
	})
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...uuid.UUID) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompanyID), v...))
	})
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompanyID), v))
	})
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompanyID), v))
	})
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompanyID), v))
	})
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v uuid.UUID) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompanyID), v))
	})
}

// CurrentFlightHoursEQ applies the EQ predicate on the "current_flight_hours" field.
func CurrentFlightHoursEQ(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursNEQ applies the NEQ predicate on the "current_flight_hours" field.
func CurrentFlightHoursNEQ(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursIn applies the In predicate on the "current_flight_hours" field.
func CurrentFlightHoursIn(vs ...float32) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentFlightHours), v...))
	})
}

// CurrentFlightHoursNotIn applies the NotIn predicate on the "current_flight_hours" field.
func CurrentFlightHoursNotIn(vs ...float32) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentFlightHours), v...))
	})
}

// CurrentFlightHoursGT applies the GT predicate on the "current_flight_hours" field.
func CurrentFlightHoursGT(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursGTE applies the GTE predicate on the "current_flight_hours" field.
func CurrentFlightHoursGTE(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursLT applies the LT predicate on the "current_flight_hours" field.
func CurrentFlightHoursLT(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursLTE applies the LTE predicate on the "current_flight_hours" field.
func CurrentFlightHoursLTE(v float32) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentFlightHours), v))
	})
}

// CurrentFlightHoursIsNil applies the IsNil predicate on the "current_flight_hours" field.
func CurrentFlightHoursIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentFlightHours)))
	})
}

// CurrentFlightHoursNotNil applies the NotNil predicate on the "current_flight_hours" field.
func CurrentFlightHoursNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentFlightHours)))
	})
}

// CurrentCyclesEQ applies the EQ predicate on the "current_cycles" field.
func CurrentCyclesEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesNEQ applies the NEQ predicate on the "current_cycles" field.
func CurrentCyclesNEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesIn applies the In predicate on the "current_cycles" field.
func CurrentCyclesIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentCycles), v...))
	})
}

// CurrentCyclesNotIn applies the NotIn predicate on the "current_cycles" field.
func CurrentCyclesNotIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentCycles), v...))
	})
}

// CurrentCyclesGT applies the GT predicate on the "current_cycles" field.
func CurrentCyclesGT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesGTE applies the GTE predicate on the "current_cycles" field.
func CurrentCyclesGTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesLT applies the LT predicate on the "current_cycles" field.
func CurrentCyclesLT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesLTE applies the LTE predicate on the "current_cycles" field.
func CurrentCyclesLTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentCycles), v))
	})
}

// CurrentCyclesIsNil applies the IsNil predicate on the "current_cycles" field.
func CurrentCyclesIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentCycles)))
	})
}

// CurrentCyclesNotNil applies the NotNil predicate on the "current_cycles" field.
func CurrentCyclesNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentCycles)))
	})
}

// AircraftRegistrationEQ applies the EQ predicate on the "aircraft_registration" field.
func AircraftRegistrationEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationNEQ applies the NEQ predicate on the "aircraft_registration" field.
func AircraftRegistrationNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationIn applies the In predicate on the "aircraft_registration" field.
func AircraftRegistrationIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAircraftRegistration), v...))
	})
}

// AircraftRegistrationNotIn applies the NotIn predicate on the "aircraft_registration" field.
func AircraftRegistrationNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAircraftRegistration), v...))
	})
}

// AircraftRegistrationGT applies the GT predicate on the "aircraft_registration" field.
func AircraftRegistrationGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationGTE applies the GTE predicate on the "aircraft_registration" field.
func AircraftRegistrationGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationLT applies the LT predicate on the "aircraft_registration" field.
func AircraftRegistrationLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationLTE applies the LTE predicate on the "aircraft_registration" field.
func AircraftRegistrationLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationContains applies the Contains predicate on the "aircraft_registration" field.
func AircraftRegistrationContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationHasPrefix applies the HasPrefix predicate on the "aircraft_registration" field.
func AircraftRegistrationHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationHasSuffix applies the HasSuffix predicate on the "aircraft_registration" field.
func AircraftRegistrationHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationIsNil applies the IsNil predicate on the "aircraft_registration" field.
func AircraftRegistrationIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAircraftRegistration)))
	})
}

// AircraftRegistrationNotNil applies the NotNil predicate on the "aircraft_registration" field.
func AircraftRegistrationNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAircraftRegistration)))
	})
}

// AircraftRegistrationEqualFold applies the EqualFold predicate on the "aircraft_registration" field.
func AircraftRegistrationEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAircraftRegistration), v))
	})
}

// AircraftRegistrationContainsFold applies the ContainsFold predicate on the "aircraft_registration" field.
func AircraftRegistrationContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAircraftRegistration), v))
	})
}

// BaseAirportCodeEQ applies the EQ predicate on the "base_airport_code" field.
func BaseAirportCodeEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeNEQ applies the NEQ predicate on the "base_airport_code" field.
func BaseAirportCodeNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeIn applies the In predicate on the "base_airport_code" field.
func BaseAirportCodeIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBaseAirportCode), v...))
	})
}

// BaseAirportCodeNotIn applies the NotIn predicate on the "base_airport_code" field.
func BaseAirportCodeNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBaseAirportCode), v...))
	})
}

// BaseAirportCodeGT applies the GT predicate on the "base_airport_code" field.
func BaseAirportCodeGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeGTE applies the GTE predicate on the "base_airport_code" field.
func BaseAirportCodeGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeLT applies the LT predicate on the "base_airport_code" field.
func BaseAirportCodeLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeLTE applies the LTE predicate on the "base_airport_code" field.
func BaseAirportCodeLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeContains applies the Contains predicate on the "base_airport_code" field.
func BaseAirportCodeContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeHasPrefix applies the HasPrefix predicate on the "base_airport_code" field.
func BaseAirportCodeHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeHasSuffix applies the HasSuffix predicate on the "base_airport_code" field.
func BaseAirportCodeHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeIsNil applies the IsNil predicate on the "base_airport_code" field.
func BaseAirportCodeIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBaseAirportCode)))
	})
}

// BaseAirportCodeNotNil applies the NotNil predicate on the "base_airport_code" field.
func BaseAirportCodeNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBaseAirportCode)))
	})
}

// BaseAirportCodeEqualFold applies the EqualFold predicate on the "base_airport_code" field.
func BaseAirportCodeEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBaseAirportCode), v))
	})
}

// BaseAirportCodeContainsFold applies the ContainsFold predicate on the "base_airport_code" field.
func BaseAirportCodeContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBaseAirportCode), v))
	})
}

// ManufacturerEQ applies the EQ predicate on the "manufacturer" field.
func ManufacturerEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturer), v))
	})
}

// ManufacturerNEQ applies the NEQ predicate on the "manufacturer" field.
func ManufacturerNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManufacturer), v))
	})
}

// ManufacturerIn applies the In predicate on the "manufacturer" field.
func ManufacturerIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManufacturer), v...))
	})
}

// ManufacturerNotIn applies the NotIn predicate on the "manufacturer" field.
func ManufacturerNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManufacturer), v...))
	})
}

// ManufacturerGT applies the GT predicate on the "manufacturer" field.
func ManufacturerGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManufacturer), v))
	})
}

// ManufacturerGTE applies the GTE predicate on the "manufacturer" field.
func ManufacturerGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManufacturer), v))
	})
}

// ManufacturerLT applies the LT predicate on the "manufacturer" field.
func ManufacturerLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManufacturer), v))
	})
}

// ManufacturerLTE applies the LTE predicate on the "manufacturer" field.
func ManufacturerLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManufacturer), v))
	})
}

// ManufacturerContains applies the Contains predicate on the "manufacturer" field.
func ManufacturerContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManufacturer), v))
	})
}

// ManufacturerHasPrefix applies the HasPrefix predicate on the "manufacturer" field.
func ManufacturerHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManufacturer), v))
	})
}

// ManufacturerHasSuffix applies the HasSuffix predicate on the "manufacturer" field.
func ManufacturerHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManufacturer), v))
	})
}

// ManufacturerIsNil applies the IsNil predicate on the "manufacturer" field.
func ManufacturerIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManufacturer)))
	})
}

// ManufacturerNotNil applies the NotNil predicate on the "manufacturer" field.
func ManufacturerNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManufacturer)))
	})
}

// ManufacturerEqualFold applies the EqualFold predicate on the "manufacturer" field.
func ManufacturerEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManufacturer), v))
	})
}

// ManufacturerContainsFold applies the ContainsFold predicate on the "manufacturer" field.
func ManufacturerContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManufacturer), v))
	})
}

// ManufacturerDesignatorEQ applies the EQ predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorNEQ applies the NEQ predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorIn applies the In predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManufacturerDesignator), v...))
	})
}

// ManufacturerDesignatorNotIn applies the NotIn predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManufacturerDesignator), v...))
	})
}

// ManufacturerDesignatorGT applies the GT predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorGTE applies the GTE predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorLT applies the LT predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorLTE applies the LTE predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorContains applies the Contains predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorHasPrefix applies the HasPrefix predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorHasSuffix applies the HasSuffix predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorIsNil applies the IsNil predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManufacturerDesignator)))
	})
}

// ManufacturerDesignatorNotNil applies the NotNil predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManufacturerDesignator)))
	})
}

// ManufacturerDesignatorEqualFold applies the EqualFold predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManufacturerDesignator), v))
	})
}

// ManufacturerDesignatorContainsFold applies the ContainsFold predicate on the "manufacturer_designator" field.
func ManufacturerDesignatorContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManufacturerDesignator), v))
	})
}

// CommonDesignationEQ applies the EQ predicate on the "common_designation" field.
func CommonDesignationEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationNEQ applies the NEQ predicate on the "common_designation" field.
func CommonDesignationNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationIn applies the In predicate on the "common_designation" field.
func CommonDesignationIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommonDesignation), v...))
	})
}

// CommonDesignationNotIn applies the NotIn predicate on the "common_designation" field.
func CommonDesignationNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommonDesignation), v...))
	})
}

// CommonDesignationGT applies the GT predicate on the "common_designation" field.
func CommonDesignationGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationGTE applies the GTE predicate on the "common_designation" field.
func CommonDesignationGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationLT applies the LT predicate on the "common_designation" field.
func CommonDesignationLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationLTE applies the LTE predicate on the "common_designation" field.
func CommonDesignationLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationContains applies the Contains predicate on the "common_designation" field.
func CommonDesignationContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationHasPrefix applies the HasPrefix predicate on the "common_designation" field.
func CommonDesignationHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationHasSuffix applies the HasSuffix predicate on the "common_designation" field.
func CommonDesignationHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationIsNil applies the IsNil predicate on the "common_designation" field.
func CommonDesignationIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommonDesignation)))
	})
}

// CommonDesignationNotNil applies the NotNil predicate on the "common_designation" field.
func CommonDesignationNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommonDesignation)))
	})
}

// CommonDesignationEqualFold applies the EqualFold predicate on the "common_designation" field.
func CommonDesignationEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommonDesignation), v))
	})
}

// CommonDesignationContainsFold applies the ContainsFold predicate on the "common_designation" field.
func CommonDesignationContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommonDesignation), v))
	})
}

// CommonNameEQ applies the EQ predicate on the "common_name" field.
func CommonNameEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommonName), v))
	})
}

// CommonNameNEQ applies the NEQ predicate on the "common_name" field.
func CommonNameNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommonName), v))
	})
}

// CommonNameIn applies the In predicate on the "common_name" field.
func CommonNameIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommonName), v...))
	})
}

// CommonNameNotIn applies the NotIn predicate on the "common_name" field.
func CommonNameNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommonName), v...))
	})
}

// CommonNameGT applies the GT predicate on the "common_name" field.
func CommonNameGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommonName), v))
	})
}

// CommonNameGTE applies the GTE predicate on the "common_name" field.
func CommonNameGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommonName), v))
	})
}

// CommonNameLT applies the LT predicate on the "common_name" field.
func CommonNameLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommonName), v))
	})
}

// CommonNameLTE applies the LTE predicate on the "common_name" field.
func CommonNameLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommonName), v))
	})
}

// CommonNameContains applies the Contains predicate on the "common_name" field.
func CommonNameContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommonName), v))
	})
}

// CommonNameHasPrefix applies the HasPrefix predicate on the "common_name" field.
func CommonNameHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommonName), v))
	})
}

// CommonNameHasSuffix applies the HasSuffix predicate on the "common_name" field.
func CommonNameHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommonName), v))
	})
}

// CommonNameIsNil applies the IsNil predicate on the "common_name" field.
func CommonNameIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommonName)))
	})
}

// CommonNameNotNil applies the NotNil predicate on the "common_name" field.
func CommonNameNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommonName)))
	})
}

// CommonNameEqualFold applies the EqualFold predicate on the "common_name" field.
func CommonNameEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommonName), v))
	})
}

// CommonNameContainsFold applies the ContainsFold predicate on the "common_name" field.
func CommonNameContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommonName), v))
	})
}

// PilotsRequiredToFlyEQ applies the EQ predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyNEQ applies the NEQ predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyNEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyIn applies the In predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPilotsRequiredToFly), v...))
	})
}

// PilotsRequiredToFlyNotIn applies the NotIn predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyNotIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPilotsRequiredToFly), v...))
	})
}

// PilotsRequiredToFlyGT applies the GT predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyGT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyGTE applies the GTE predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyGTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyLT applies the LT predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyLT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyLTE applies the LTE predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyLTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPilotsRequiredToFly), v))
	})
}

// PilotsRequiredToFlyIsNil applies the IsNil predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPilotsRequiredToFly)))
	})
}

// PilotsRequiredToFlyNotNil applies the NotNil predicate on the "pilots_required_to_fly" field.
func PilotsRequiredToFlyNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPilotsRequiredToFly)))
	})
}

// DefaultValuesEQ applies the EQ predicate on the "default_values" field.
func DefaultValuesEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesNEQ applies the NEQ predicate on the "default_values" field.
func DefaultValuesNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesIn applies the In predicate on the "default_values" field.
func DefaultValuesIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultValues), v...))
	})
}

// DefaultValuesNotIn applies the NotIn predicate on the "default_values" field.
func DefaultValuesNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultValues), v...))
	})
}

// DefaultValuesGT applies the GT predicate on the "default_values" field.
func DefaultValuesGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesGTE applies the GTE predicate on the "default_values" field.
func DefaultValuesGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesLT applies the LT predicate on the "default_values" field.
func DefaultValuesLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesLTE applies the LTE predicate on the "default_values" field.
func DefaultValuesLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesContains applies the Contains predicate on the "default_values" field.
func DefaultValuesContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesHasPrefix applies the HasPrefix predicate on the "default_values" field.
func DefaultValuesHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesHasSuffix applies the HasSuffix predicate on the "default_values" field.
func DefaultValuesHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesIsNil applies the IsNil predicate on the "default_values" field.
func DefaultValuesIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultValues)))
	})
}

// DefaultValuesNotNil applies the NotNil predicate on the "default_values" field.
func DefaultValuesNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultValues)))
	})
}

// DefaultValuesEqualFold applies the EqualFold predicate on the "default_values" field.
func DefaultValuesEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultValues), v))
	})
}

// DefaultValuesContainsFold applies the ContainsFold predicate on the "default_values" field.
func DefaultValuesContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultValues), v))
	})
}

// MaximumValuesEQ applies the EQ predicate on the "maximum_values" field.
func MaximumValuesEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesNEQ applies the NEQ predicate on the "maximum_values" field.
func MaximumValuesNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesIn applies the In predicate on the "maximum_values" field.
func MaximumValuesIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaximumValues), v...))
	})
}

// MaximumValuesNotIn applies the NotIn predicate on the "maximum_values" field.
func MaximumValuesNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaximumValues), v...))
	})
}

// MaximumValuesGT applies the GT predicate on the "maximum_values" field.
func MaximumValuesGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesGTE applies the GTE predicate on the "maximum_values" field.
func MaximumValuesGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesLT applies the LT predicate on the "maximum_values" field.
func MaximumValuesLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesLTE applies the LTE predicate on the "maximum_values" field.
func MaximumValuesLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesContains applies the Contains predicate on the "maximum_values" field.
func MaximumValuesContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesHasPrefix applies the HasPrefix predicate on the "maximum_values" field.
func MaximumValuesHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesHasSuffix applies the HasSuffix predicate on the "maximum_values" field.
func MaximumValuesHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesIsNil applies the IsNil predicate on the "maximum_values" field.
func MaximumValuesIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaximumValues)))
	})
}

// MaximumValuesNotNil applies the NotNil predicate on the "maximum_values" field.
func MaximumValuesNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaximumValues)))
	})
}

// MaximumValuesEqualFold applies the EqualFold predicate on the "maximum_values" field.
func MaximumValuesEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaximumValues), v))
	})
}

// MaximumValuesContainsFold applies the ContainsFold predicate on the "maximum_values" field.
func MaximumValuesContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaximumValues), v))
	})
}

// CurrentLandingsEQ applies the EQ predicate on the "current_landings" field.
func CurrentLandingsEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsNEQ applies the NEQ predicate on the "current_landings" field.
func CurrentLandingsNEQ(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsIn applies the In predicate on the "current_landings" field.
func CurrentLandingsIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentLandings), v...))
	})
}

// CurrentLandingsNotIn applies the NotIn predicate on the "current_landings" field.
func CurrentLandingsNotIn(vs ...int) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentLandings), v...))
	})
}

// CurrentLandingsGT applies the GT predicate on the "current_landings" field.
func CurrentLandingsGT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsGTE applies the GTE predicate on the "current_landings" field.
func CurrentLandingsGTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsLT applies the LT predicate on the "current_landings" field.
func CurrentLandingsLT(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsLTE applies the LTE predicate on the "current_landings" field.
func CurrentLandingsLTE(v int) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentLandings), v))
	})
}

// CurrentLandingsIsNil applies the IsNil predicate on the "current_landings" field.
func CurrentLandingsIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentLandings)))
	})
}

// CurrentLandingsNotNil applies the NotNil predicate on the "current_landings" field.
func CurrentLandingsNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentLandings)))
	})
}

// FuelDetailsEQ applies the EQ predicate on the "fuel_details" field.
func FuelDetailsEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsNEQ applies the NEQ predicate on the "fuel_details" field.
func FuelDetailsNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsIn applies the In predicate on the "fuel_details" field.
func FuelDetailsIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFuelDetails), v...))
	})
}

// FuelDetailsNotIn applies the NotIn predicate on the "fuel_details" field.
func FuelDetailsNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFuelDetails), v...))
	})
}

// FuelDetailsGT applies the GT predicate on the "fuel_details" field.
func FuelDetailsGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsGTE applies the GTE predicate on the "fuel_details" field.
func FuelDetailsGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsLT applies the LT predicate on the "fuel_details" field.
func FuelDetailsLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsLTE applies the LTE predicate on the "fuel_details" field.
func FuelDetailsLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsContains applies the Contains predicate on the "fuel_details" field.
func FuelDetailsContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsHasPrefix applies the HasPrefix predicate on the "fuel_details" field.
func FuelDetailsHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsHasSuffix applies the HasSuffix predicate on the "fuel_details" field.
func FuelDetailsHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsIsNil applies the IsNil predicate on the "fuel_details" field.
func FuelDetailsIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFuelDetails)))
	})
}

// FuelDetailsNotNil applies the NotNil predicate on the "fuel_details" field.
func FuelDetailsNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFuelDetails)))
	})
}

// FuelDetailsEqualFold applies the EqualFold predicate on the "fuel_details" field.
func FuelDetailsEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFuelDetails), v))
	})
}

// FuelDetailsContainsFold applies the ContainsFold predicate on the "fuel_details" field.
func FuelDetailsContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFuelDetails), v))
	})
}

// OilDetailsEQ applies the EQ predicate on the "oil_details" field.
func OilDetailsEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOilDetails), v))
	})
}

// OilDetailsNEQ applies the NEQ predicate on the "oil_details" field.
func OilDetailsNEQ(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOilDetails), v))
	})
}

// OilDetailsIn applies the In predicate on the "oil_details" field.
func OilDetailsIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOilDetails), v...))
	})
}

// OilDetailsNotIn applies the NotIn predicate on the "oil_details" field.
func OilDetailsNotIn(vs ...string) predicate.Aircraft {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Aircraft(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOilDetails), v...))
	})
}

// OilDetailsGT applies the GT predicate on the "oil_details" field.
func OilDetailsGT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOilDetails), v))
	})
}

// OilDetailsGTE applies the GTE predicate on the "oil_details" field.
func OilDetailsGTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOilDetails), v))
	})
}

// OilDetailsLT applies the LT predicate on the "oil_details" field.
func OilDetailsLT(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOilDetails), v))
	})
}

// OilDetailsLTE applies the LTE predicate on the "oil_details" field.
func OilDetailsLTE(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOilDetails), v))
	})
}

// OilDetailsContains applies the Contains predicate on the "oil_details" field.
func OilDetailsContains(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOilDetails), v))
	})
}

// OilDetailsHasPrefix applies the HasPrefix predicate on the "oil_details" field.
func OilDetailsHasPrefix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOilDetails), v))
	})
}

// OilDetailsHasSuffix applies the HasSuffix predicate on the "oil_details" field.
func OilDetailsHasSuffix(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOilDetails), v))
	})
}

// OilDetailsIsNil applies the IsNil predicate on the "oil_details" field.
func OilDetailsIsNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOilDetails)))
	})
}

// OilDetailsNotNil applies the NotNil predicate on the "oil_details" field.
func OilDetailsNotNil() predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOilDetails)))
	})
}

// OilDetailsEqualFold applies the EqualFold predicate on the "oil_details" field.
func OilDetailsEqualFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOilDetails), v))
	})
}

// OilDetailsContainsFold applies the ContainsFold predicate on the "oil_details" field.
func OilDetailsContainsFold(v string) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOilDetails), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Aircraft) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Aircraft) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Aircraft) predicate.Aircraft {
	return predicate.Aircraft(func(s *sql.Selector) {
		p(s.Not())
	})
}
