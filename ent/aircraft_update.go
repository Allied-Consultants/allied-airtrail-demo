// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/aircraft"
	"enttest/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AircraftUpdate is the builder for updating Aircraft entities.
type AircraftUpdate struct {
	config
	hooks    []Hook
	mutation *AircraftMutation
}

// Where appends a list predicates to the AircraftUpdate builder.
func (au *AircraftUpdate) Where(ps ...predicate.Aircraft) *AircraftUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCompanyID sets the "company_id" field.
func (au *AircraftUpdate) SetCompanyID(u uuid.UUID) *AircraftUpdate {
	au.mutation.SetCompanyID(u)
	return au
}

// SetCurrentFlightHours sets the "current_flight_hours" field.
func (au *AircraftUpdate) SetCurrentFlightHours(f float32) *AircraftUpdate {
	au.mutation.ResetCurrentFlightHours()
	au.mutation.SetCurrentFlightHours(f)
	return au
}

// SetNillableCurrentFlightHours sets the "current_flight_hours" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCurrentFlightHours(f *float32) *AircraftUpdate {
	if f != nil {
		au.SetCurrentFlightHours(*f)
	}
	return au
}

// AddCurrentFlightHours adds f to the "current_flight_hours" field.
func (au *AircraftUpdate) AddCurrentFlightHours(f float32) *AircraftUpdate {
	au.mutation.AddCurrentFlightHours(f)
	return au
}

// ClearCurrentFlightHours clears the value of the "current_flight_hours" field.
func (au *AircraftUpdate) ClearCurrentFlightHours() *AircraftUpdate {
	au.mutation.ClearCurrentFlightHours()
	return au
}

// SetCurrentCycles sets the "current_cycles" field.
func (au *AircraftUpdate) SetCurrentCycles(i int) *AircraftUpdate {
	au.mutation.ResetCurrentCycles()
	au.mutation.SetCurrentCycles(i)
	return au
}

// SetNillableCurrentCycles sets the "current_cycles" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCurrentCycles(i *int) *AircraftUpdate {
	if i != nil {
		au.SetCurrentCycles(*i)
	}
	return au
}

// AddCurrentCycles adds i to the "current_cycles" field.
func (au *AircraftUpdate) AddCurrentCycles(i int) *AircraftUpdate {
	au.mutation.AddCurrentCycles(i)
	return au
}

// ClearCurrentCycles clears the value of the "current_cycles" field.
func (au *AircraftUpdate) ClearCurrentCycles() *AircraftUpdate {
	au.mutation.ClearCurrentCycles()
	return au
}

// SetAircraftRegistration sets the "aircraft_registration" field.
func (au *AircraftUpdate) SetAircraftRegistration(s string) *AircraftUpdate {
	au.mutation.SetAircraftRegistration(s)
	return au
}

// SetNillableAircraftRegistration sets the "aircraft_registration" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableAircraftRegistration(s *string) *AircraftUpdate {
	if s != nil {
		au.SetAircraftRegistration(*s)
	}
	return au
}

// ClearAircraftRegistration clears the value of the "aircraft_registration" field.
func (au *AircraftUpdate) ClearAircraftRegistration() *AircraftUpdate {
	au.mutation.ClearAircraftRegistration()
	return au
}

// SetBaseAirportCode sets the "base_airport_code" field.
func (au *AircraftUpdate) SetBaseAirportCode(s string) *AircraftUpdate {
	au.mutation.SetBaseAirportCode(s)
	return au
}

// SetNillableBaseAirportCode sets the "base_airport_code" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableBaseAirportCode(s *string) *AircraftUpdate {
	if s != nil {
		au.SetBaseAirportCode(*s)
	}
	return au
}

// ClearBaseAirportCode clears the value of the "base_airport_code" field.
func (au *AircraftUpdate) ClearBaseAirportCode() *AircraftUpdate {
	au.mutation.ClearBaseAirportCode()
	return au
}

// SetManufacturer sets the "manufacturer" field.
func (au *AircraftUpdate) SetManufacturer(s string) *AircraftUpdate {
	au.mutation.SetManufacturer(s)
	return au
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableManufacturer(s *string) *AircraftUpdate {
	if s != nil {
		au.SetManufacturer(*s)
	}
	return au
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (au *AircraftUpdate) ClearManufacturer() *AircraftUpdate {
	au.mutation.ClearManufacturer()
	return au
}

// SetManufacturerDesignator sets the "manufacturer_designator" field.
func (au *AircraftUpdate) SetManufacturerDesignator(s string) *AircraftUpdate {
	au.mutation.SetManufacturerDesignator(s)
	return au
}

// SetNillableManufacturerDesignator sets the "manufacturer_designator" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableManufacturerDesignator(s *string) *AircraftUpdate {
	if s != nil {
		au.SetManufacturerDesignator(*s)
	}
	return au
}

// ClearManufacturerDesignator clears the value of the "manufacturer_designator" field.
func (au *AircraftUpdate) ClearManufacturerDesignator() *AircraftUpdate {
	au.mutation.ClearManufacturerDesignator()
	return au
}

// SetCommonDesignation sets the "common_designation" field.
func (au *AircraftUpdate) SetCommonDesignation(s string) *AircraftUpdate {
	au.mutation.SetCommonDesignation(s)
	return au
}

// SetNillableCommonDesignation sets the "common_designation" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCommonDesignation(s *string) *AircraftUpdate {
	if s != nil {
		au.SetCommonDesignation(*s)
	}
	return au
}

// ClearCommonDesignation clears the value of the "common_designation" field.
func (au *AircraftUpdate) ClearCommonDesignation() *AircraftUpdate {
	au.mutation.ClearCommonDesignation()
	return au
}

// SetCommonName sets the "common_name" field.
func (au *AircraftUpdate) SetCommonName(s string) *AircraftUpdate {
	au.mutation.SetCommonName(s)
	return au
}

// SetNillableCommonName sets the "common_name" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCommonName(s *string) *AircraftUpdate {
	if s != nil {
		au.SetCommonName(*s)
	}
	return au
}

// ClearCommonName clears the value of the "common_name" field.
func (au *AircraftUpdate) ClearCommonName() *AircraftUpdate {
	au.mutation.ClearCommonName()
	return au
}

// SetPilotsRequiredToFly sets the "pilots_required_to_fly" field.
func (au *AircraftUpdate) SetPilotsRequiredToFly(i int) *AircraftUpdate {
	au.mutation.ResetPilotsRequiredToFly()
	au.mutation.SetPilotsRequiredToFly(i)
	return au
}

// SetNillablePilotsRequiredToFly sets the "pilots_required_to_fly" field if the given value is not nil.
func (au *AircraftUpdate) SetNillablePilotsRequiredToFly(i *int) *AircraftUpdate {
	if i != nil {
		au.SetPilotsRequiredToFly(*i)
	}
	return au
}

// AddPilotsRequiredToFly adds i to the "pilots_required_to_fly" field.
func (au *AircraftUpdate) AddPilotsRequiredToFly(i int) *AircraftUpdate {
	au.mutation.AddPilotsRequiredToFly(i)
	return au
}

// ClearPilotsRequiredToFly clears the value of the "pilots_required_to_fly" field.
func (au *AircraftUpdate) ClearPilotsRequiredToFly() *AircraftUpdate {
	au.mutation.ClearPilotsRequiredToFly()
	return au
}

// SetDefaultValues sets the "default_values" field.
func (au *AircraftUpdate) SetDefaultValues(s string) *AircraftUpdate {
	au.mutation.SetDefaultValues(s)
	return au
}

// SetNillableDefaultValues sets the "default_values" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableDefaultValues(s *string) *AircraftUpdate {
	if s != nil {
		au.SetDefaultValues(*s)
	}
	return au
}

// ClearDefaultValues clears the value of the "default_values" field.
func (au *AircraftUpdate) ClearDefaultValues() *AircraftUpdate {
	au.mutation.ClearDefaultValues()
	return au
}

// SetMaximumValues sets the "maximum_values" field.
func (au *AircraftUpdate) SetMaximumValues(s string) *AircraftUpdate {
	au.mutation.SetMaximumValues(s)
	return au
}

// SetNillableMaximumValues sets the "maximum_values" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableMaximumValues(s *string) *AircraftUpdate {
	if s != nil {
		au.SetMaximumValues(*s)
	}
	return au
}

// ClearMaximumValues clears the value of the "maximum_values" field.
func (au *AircraftUpdate) ClearMaximumValues() *AircraftUpdate {
	au.mutation.ClearMaximumValues()
	return au
}

// SetCurrentLandings sets the "current_landings" field.
func (au *AircraftUpdate) SetCurrentLandings(i int) *AircraftUpdate {
	au.mutation.ResetCurrentLandings()
	au.mutation.SetCurrentLandings(i)
	return au
}

// SetNillableCurrentLandings sets the "current_landings" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableCurrentLandings(i *int) *AircraftUpdate {
	if i != nil {
		au.SetCurrentLandings(*i)
	}
	return au
}

// AddCurrentLandings adds i to the "current_landings" field.
func (au *AircraftUpdate) AddCurrentLandings(i int) *AircraftUpdate {
	au.mutation.AddCurrentLandings(i)
	return au
}

// ClearCurrentLandings clears the value of the "current_landings" field.
func (au *AircraftUpdate) ClearCurrentLandings() *AircraftUpdate {
	au.mutation.ClearCurrentLandings()
	return au
}

// SetFuelDetails sets the "fuel_details" field.
func (au *AircraftUpdate) SetFuelDetails(s string) *AircraftUpdate {
	au.mutation.SetFuelDetails(s)
	return au
}

// SetNillableFuelDetails sets the "fuel_details" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableFuelDetails(s *string) *AircraftUpdate {
	if s != nil {
		au.SetFuelDetails(*s)
	}
	return au
}

// ClearFuelDetails clears the value of the "fuel_details" field.
func (au *AircraftUpdate) ClearFuelDetails() *AircraftUpdate {
	au.mutation.ClearFuelDetails()
	return au
}

// SetOilDetails sets the "oil_details" field.
func (au *AircraftUpdate) SetOilDetails(s string) *AircraftUpdate {
	au.mutation.SetOilDetails(s)
	return au
}

// SetNillableOilDetails sets the "oil_details" field if the given value is not nil.
func (au *AircraftUpdate) SetNillableOilDetails(s *string) *AircraftUpdate {
	if s != nil {
		au.SetOilDetails(*s)
	}
	return au
}

// ClearOilDetails clears the value of the "oil_details" field.
func (au *AircraftUpdate) ClearOilDetails() *AircraftUpdate {
	au.mutation.ClearOilDetails()
	return au
}

// Mutation returns the AircraftMutation object of the builder.
func (au *AircraftUpdate) Mutation() *AircraftMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AircraftUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AircraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AircraftUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AircraftUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AircraftUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AircraftUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aircraft.Table,
			Columns: aircraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: aircraft.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CompanyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: aircraft.FieldCompanyID,
		})
	}
	if value, ok := au.mutation.CurrentFlightHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if value, ok := au.mutation.AddedCurrentFlightHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if au.mutation.CurrentFlightHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if value, ok := au.mutation.CurrentCycles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if value, ok := au.mutation.AddedCurrentCycles(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if au.mutation.CurrentCyclesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if value, ok := au.mutation.AircraftRegistration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldAircraftRegistration,
		})
	}
	if au.mutation.AircraftRegistrationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldAircraftRegistration,
		})
	}
	if value, ok := au.mutation.BaseAirportCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldBaseAirportCode,
		})
	}
	if au.mutation.BaseAirportCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldBaseAirportCode,
		})
	}
	if value, ok := au.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturer,
		})
	}
	if au.mutation.ManufacturerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldManufacturer,
		})
	}
	if value, ok := au.mutation.ManufacturerDesignator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturerDesignator,
		})
	}
	if au.mutation.ManufacturerDesignatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldManufacturerDesignator,
		})
	}
	if value, ok := au.mutation.CommonDesignation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldCommonDesignation,
		})
	}
	if au.mutation.CommonDesignationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldCommonDesignation,
		})
	}
	if value, ok := au.mutation.CommonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldCommonName,
		})
	}
	if au.mutation.CommonNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldCommonName,
		})
	}
	if value, ok := au.mutation.PilotsRequiredToFly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if value, ok := au.mutation.AddedPilotsRequiredToFly(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if au.mutation.PilotsRequiredToFlyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if value, ok := au.mutation.DefaultValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldDefaultValues,
		})
	}
	if au.mutation.DefaultValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldDefaultValues,
		})
	}
	if value, ok := au.mutation.MaximumValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldMaximumValues,
		})
	}
	if au.mutation.MaximumValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldMaximumValues,
		})
	}
	if value, ok := au.mutation.CurrentLandings(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if value, ok := au.mutation.AddedCurrentLandings(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if au.mutation.CurrentLandingsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if value, ok := au.mutation.FuelDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldFuelDetails,
		})
	}
	if au.mutation.FuelDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldFuelDetails,
		})
	}
	if value, ok := au.mutation.OilDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldOilDetails,
		})
	}
	if au.mutation.OilDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldOilDetails,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aircraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AircraftUpdateOne is the builder for updating a single Aircraft entity.
type AircraftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AircraftMutation
}

// SetCompanyID sets the "company_id" field.
func (auo *AircraftUpdateOne) SetCompanyID(u uuid.UUID) *AircraftUpdateOne {
	auo.mutation.SetCompanyID(u)
	return auo
}

// SetCurrentFlightHours sets the "current_flight_hours" field.
func (auo *AircraftUpdateOne) SetCurrentFlightHours(f float32) *AircraftUpdateOne {
	auo.mutation.ResetCurrentFlightHours()
	auo.mutation.SetCurrentFlightHours(f)
	return auo
}

// SetNillableCurrentFlightHours sets the "current_flight_hours" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCurrentFlightHours(f *float32) *AircraftUpdateOne {
	if f != nil {
		auo.SetCurrentFlightHours(*f)
	}
	return auo
}

// AddCurrentFlightHours adds f to the "current_flight_hours" field.
func (auo *AircraftUpdateOne) AddCurrentFlightHours(f float32) *AircraftUpdateOne {
	auo.mutation.AddCurrentFlightHours(f)
	return auo
}

// ClearCurrentFlightHours clears the value of the "current_flight_hours" field.
func (auo *AircraftUpdateOne) ClearCurrentFlightHours() *AircraftUpdateOne {
	auo.mutation.ClearCurrentFlightHours()
	return auo
}

// SetCurrentCycles sets the "current_cycles" field.
func (auo *AircraftUpdateOne) SetCurrentCycles(i int) *AircraftUpdateOne {
	auo.mutation.ResetCurrentCycles()
	auo.mutation.SetCurrentCycles(i)
	return auo
}

// SetNillableCurrentCycles sets the "current_cycles" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCurrentCycles(i *int) *AircraftUpdateOne {
	if i != nil {
		auo.SetCurrentCycles(*i)
	}
	return auo
}

// AddCurrentCycles adds i to the "current_cycles" field.
func (auo *AircraftUpdateOne) AddCurrentCycles(i int) *AircraftUpdateOne {
	auo.mutation.AddCurrentCycles(i)
	return auo
}

// ClearCurrentCycles clears the value of the "current_cycles" field.
func (auo *AircraftUpdateOne) ClearCurrentCycles() *AircraftUpdateOne {
	auo.mutation.ClearCurrentCycles()
	return auo
}

// SetAircraftRegistration sets the "aircraft_registration" field.
func (auo *AircraftUpdateOne) SetAircraftRegistration(s string) *AircraftUpdateOne {
	auo.mutation.SetAircraftRegistration(s)
	return auo
}

// SetNillableAircraftRegistration sets the "aircraft_registration" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableAircraftRegistration(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetAircraftRegistration(*s)
	}
	return auo
}

// ClearAircraftRegistration clears the value of the "aircraft_registration" field.
func (auo *AircraftUpdateOne) ClearAircraftRegistration() *AircraftUpdateOne {
	auo.mutation.ClearAircraftRegistration()
	return auo
}

// SetBaseAirportCode sets the "base_airport_code" field.
func (auo *AircraftUpdateOne) SetBaseAirportCode(s string) *AircraftUpdateOne {
	auo.mutation.SetBaseAirportCode(s)
	return auo
}

// SetNillableBaseAirportCode sets the "base_airport_code" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableBaseAirportCode(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetBaseAirportCode(*s)
	}
	return auo
}

// ClearBaseAirportCode clears the value of the "base_airport_code" field.
func (auo *AircraftUpdateOne) ClearBaseAirportCode() *AircraftUpdateOne {
	auo.mutation.ClearBaseAirportCode()
	return auo
}

// SetManufacturer sets the "manufacturer" field.
func (auo *AircraftUpdateOne) SetManufacturer(s string) *AircraftUpdateOne {
	auo.mutation.SetManufacturer(s)
	return auo
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableManufacturer(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetManufacturer(*s)
	}
	return auo
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (auo *AircraftUpdateOne) ClearManufacturer() *AircraftUpdateOne {
	auo.mutation.ClearManufacturer()
	return auo
}

// SetManufacturerDesignator sets the "manufacturer_designator" field.
func (auo *AircraftUpdateOne) SetManufacturerDesignator(s string) *AircraftUpdateOne {
	auo.mutation.SetManufacturerDesignator(s)
	return auo
}

// SetNillableManufacturerDesignator sets the "manufacturer_designator" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableManufacturerDesignator(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetManufacturerDesignator(*s)
	}
	return auo
}

// ClearManufacturerDesignator clears the value of the "manufacturer_designator" field.
func (auo *AircraftUpdateOne) ClearManufacturerDesignator() *AircraftUpdateOne {
	auo.mutation.ClearManufacturerDesignator()
	return auo
}

// SetCommonDesignation sets the "common_designation" field.
func (auo *AircraftUpdateOne) SetCommonDesignation(s string) *AircraftUpdateOne {
	auo.mutation.SetCommonDesignation(s)
	return auo
}

// SetNillableCommonDesignation sets the "common_designation" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCommonDesignation(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetCommonDesignation(*s)
	}
	return auo
}

// ClearCommonDesignation clears the value of the "common_designation" field.
func (auo *AircraftUpdateOne) ClearCommonDesignation() *AircraftUpdateOne {
	auo.mutation.ClearCommonDesignation()
	return auo
}

// SetCommonName sets the "common_name" field.
func (auo *AircraftUpdateOne) SetCommonName(s string) *AircraftUpdateOne {
	auo.mutation.SetCommonName(s)
	return auo
}

// SetNillableCommonName sets the "common_name" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCommonName(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetCommonName(*s)
	}
	return auo
}

// ClearCommonName clears the value of the "common_name" field.
func (auo *AircraftUpdateOne) ClearCommonName() *AircraftUpdateOne {
	auo.mutation.ClearCommonName()
	return auo
}

// SetPilotsRequiredToFly sets the "pilots_required_to_fly" field.
func (auo *AircraftUpdateOne) SetPilotsRequiredToFly(i int) *AircraftUpdateOne {
	auo.mutation.ResetPilotsRequiredToFly()
	auo.mutation.SetPilotsRequiredToFly(i)
	return auo
}

// SetNillablePilotsRequiredToFly sets the "pilots_required_to_fly" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillablePilotsRequiredToFly(i *int) *AircraftUpdateOne {
	if i != nil {
		auo.SetPilotsRequiredToFly(*i)
	}
	return auo
}

// AddPilotsRequiredToFly adds i to the "pilots_required_to_fly" field.
func (auo *AircraftUpdateOne) AddPilotsRequiredToFly(i int) *AircraftUpdateOne {
	auo.mutation.AddPilotsRequiredToFly(i)
	return auo
}

// ClearPilotsRequiredToFly clears the value of the "pilots_required_to_fly" field.
func (auo *AircraftUpdateOne) ClearPilotsRequiredToFly() *AircraftUpdateOne {
	auo.mutation.ClearPilotsRequiredToFly()
	return auo
}

// SetDefaultValues sets the "default_values" field.
func (auo *AircraftUpdateOne) SetDefaultValues(s string) *AircraftUpdateOne {
	auo.mutation.SetDefaultValues(s)
	return auo
}

// SetNillableDefaultValues sets the "default_values" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableDefaultValues(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetDefaultValues(*s)
	}
	return auo
}

// ClearDefaultValues clears the value of the "default_values" field.
func (auo *AircraftUpdateOne) ClearDefaultValues() *AircraftUpdateOne {
	auo.mutation.ClearDefaultValues()
	return auo
}

// SetMaximumValues sets the "maximum_values" field.
func (auo *AircraftUpdateOne) SetMaximumValues(s string) *AircraftUpdateOne {
	auo.mutation.SetMaximumValues(s)
	return auo
}

// SetNillableMaximumValues sets the "maximum_values" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableMaximumValues(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetMaximumValues(*s)
	}
	return auo
}

// ClearMaximumValues clears the value of the "maximum_values" field.
func (auo *AircraftUpdateOne) ClearMaximumValues() *AircraftUpdateOne {
	auo.mutation.ClearMaximumValues()
	return auo
}

// SetCurrentLandings sets the "current_landings" field.
func (auo *AircraftUpdateOne) SetCurrentLandings(i int) *AircraftUpdateOne {
	auo.mutation.ResetCurrentLandings()
	auo.mutation.SetCurrentLandings(i)
	return auo
}

// SetNillableCurrentLandings sets the "current_landings" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableCurrentLandings(i *int) *AircraftUpdateOne {
	if i != nil {
		auo.SetCurrentLandings(*i)
	}
	return auo
}

// AddCurrentLandings adds i to the "current_landings" field.
func (auo *AircraftUpdateOne) AddCurrentLandings(i int) *AircraftUpdateOne {
	auo.mutation.AddCurrentLandings(i)
	return auo
}

// ClearCurrentLandings clears the value of the "current_landings" field.
func (auo *AircraftUpdateOne) ClearCurrentLandings() *AircraftUpdateOne {
	auo.mutation.ClearCurrentLandings()
	return auo
}

// SetFuelDetails sets the "fuel_details" field.
func (auo *AircraftUpdateOne) SetFuelDetails(s string) *AircraftUpdateOne {
	auo.mutation.SetFuelDetails(s)
	return auo
}

// SetNillableFuelDetails sets the "fuel_details" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableFuelDetails(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetFuelDetails(*s)
	}
	return auo
}

// ClearFuelDetails clears the value of the "fuel_details" field.
func (auo *AircraftUpdateOne) ClearFuelDetails() *AircraftUpdateOne {
	auo.mutation.ClearFuelDetails()
	return auo
}

// SetOilDetails sets the "oil_details" field.
func (auo *AircraftUpdateOne) SetOilDetails(s string) *AircraftUpdateOne {
	auo.mutation.SetOilDetails(s)
	return auo
}

// SetNillableOilDetails sets the "oil_details" field if the given value is not nil.
func (auo *AircraftUpdateOne) SetNillableOilDetails(s *string) *AircraftUpdateOne {
	if s != nil {
		auo.SetOilDetails(*s)
	}
	return auo
}

// ClearOilDetails clears the value of the "oil_details" field.
func (auo *AircraftUpdateOne) ClearOilDetails() *AircraftUpdateOne {
	auo.mutation.ClearOilDetails()
	return auo
}

// Mutation returns the AircraftMutation object of the builder.
func (auo *AircraftUpdateOne) Mutation() *AircraftMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AircraftUpdateOne) Select(field string, fields ...string) *AircraftUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Aircraft entity.
func (auo *AircraftUpdateOne) Save(ctx context.Context) (*Aircraft, error) {
	var (
		err  error
		node *Aircraft
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AircraftMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AircraftUpdateOne) SaveX(ctx context.Context) *Aircraft {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AircraftUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AircraftUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AircraftUpdateOne) sqlSave(ctx context.Context) (_node *Aircraft, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aircraft.Table,
			Columns: aircraft.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: aircraft.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Aircraft.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aircraft.FieldID)
		for _, f := range fields {
			if !aircraft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != aircraft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CompanyID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: aircraft.FieldCompanyID,
		})
	}
	if value, ok := auo.mutation.CurrentFlightHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if value, ok := auo.mutation.AddedCurrentFlightHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if auo.mutation.CurrentFlightHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: aircraft.FieldCurrentFlightHours,
		})
	}
	if value, ok := auo.mutation.CurrentCycles(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if value, ok := auo.mutation.AddedCurrentCycles(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if auo.mutation.CurrentCyclesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldCurrentCycles,
		})
	}
	if value, ok := auo.mutation.AircraftRegistration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldAircraftRegistration,
		})
	}
	if auo.mutation.AircraftRegistrationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldAircraftRegistration,
		})
	}
	if value, ok := auo.mutation.BaseAirportCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldBaseAirportCode,
		})
	}
	if auo.mutation.BaseAirportCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldBaseAirportCode,
		})
	}
	if value, ok := auo.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturer,
		})
	}
	if auo.mutation.ManufacturerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldManufacturer,
		})
	}
	if value, ok := auo.mutation.ManufacturerDesignator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldManufacturerDesignator,
		})
	}
	if auo.mutation.ManufacturerDesignatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldManufacturerDesignator,
		})
	}
	if value, ok := auo.mutation.CommonDesignation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldCommonDesignation,
		})
	}
	if auo.mutation.CommonDesignationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldCommonDesignation,
		})
	}
	if value, ok := auo.mutation.CommonName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldCommonName,
		})
	}
	if auo.mutation.CommonNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldCommonName,
		})
	}
	if value, ok := auo.mutation.PilotsRequiredToFly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if value, ok := auo.mutation.AddedPilotsRequiredToFly(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if auo.mutation.PilotsRequiredToFlyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldPilotsRequiredToFly,
		})
	}
	if value, ok := auo.mutation.DefaultValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldDefaultValues,
		})
	}
	if auo.mutation.DefaultValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldDefaultValues,
		})
	}
	if value, ok := auo.mutation.MaximumValues(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldMaximumValues,
		})
	}
	if auo.mutation.MaximumValuesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldMaximumValues,
		})
	}
	if value, ok := auo.mutation.CurrentLandings(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if value, ok := auo.mutation.AddedCurrentLandings(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if auo.mutation.CurrentLandingsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: aircraft.FieldCurrentLandings,
		})
	}
	if value, ok := auo.mutation.FuelDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldFuelDetails,
		})
	}
	if auo.mutation.FuelDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldFuelDetails,
		})
	}
	if value, ok := auo.mutation.OilDetails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aircraft.FieldOilDetails,
		})
	}
	if auo.mutation.OilDetailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aircraft.FieldOilDetails,
		})
	}
	_node = &Aircraft{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aircraft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
